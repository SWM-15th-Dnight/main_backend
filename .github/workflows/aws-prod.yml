name: Deploy to Amazon ECR

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: calinify
  BASTION_HOST : ${{ secrets.CALINIFY_BASTION_HOST }}
  BASTION_USER : ${{ secrets.CALINIFY_BASTION_USER }}
  PRIVATE_MAIN_HOST: ${{ secrets.CALINIFY_MAIN_PRIVATE_HOST }}
  PRIVATE_MAIN_USER: ${{ secrets.CALINIFY_MAIN_PRIVATE_USER }}
  BASTION_PEM : ${{ secrets.CALINIFY_BASTOIN_PEM }}
  PRIVATE_MAIN_PEM : ${{ secrets.CALINIFY_MAIN_PRIVATE_PEM }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # AWS ECR IAM 연결
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # docker image 빌드
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ env.BASTION_PEM }}

    
    - name: Deploy Docker image to EC2
      run: |       
        # SSH into EC2 and run Docker commands
        ssh -o StrictHostKeyChecking=no ${{ env.BASTION_USER }}@${{ env.BASTION_HOST }} << 'EOF'
        
          echo ${{ env.PRIVATE_MAIN_PEM }} > private_main_key.pem
          
          chmod 600 private_main_key.pem
        
          ssh -i private_ec2_key.pem ${{ env.PRIVATE_MAIN_USER }}@${{ env.PRIVATE_MAIN_HOST }} << 'INNER_EOF'
        
            # Login to ECR
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
  
            sudo docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${{ steps.login-ecr.outputs.registry }}
  
            # Pull the Docker image
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
  
            # 중복된 docker 컨테이너, 이미지 삭제
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^core-backend-dev$'; then
              # Stop and remove the existing container
              sudo docker stop core-backend-dev
              sudo docker rm core-backend-dev
            fi
        
            # 내부에서 사용할 env 파일 생성
            echo "CALINIFY_DATABASE_HOST=${{ secrets.CALINIFY_PROD_RDS_HOST }}" >> .env
            echo "CALINIFY_DATABASE_PASSWORD=${{ secrets.CALINIFY_PROD_RDS_PASSWORD }}" >> .env
            echo "CALINIFY_DATABASE_PORT=${{ secrets.CALINIFY_PROD_RDS_PORT }}" >> .env
            echo "CALINIFY_DATABASE_TABLE_NAME=${{ secrets.CALINIFY_PROD_RDS_TABLE_NAME }}" >> .env
            echo "CALINIFY_DATABASE_USERNAME=${{ secrets.CALINIFY_PROD_RDS_USERNAME }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "AI_SERVER_URL=${{ secrets.PROD_AI_SERVER_URL }}" >> .env
  
            # Run the new Docker container
            sudo docker run -d --name core-backend-dev --env-file /home/${{ env.EC2_USER }}/.env -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          INNER_EOF
        EOF
