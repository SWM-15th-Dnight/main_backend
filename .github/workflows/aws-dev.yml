name: Deploy to Amazon ECR

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-northeast-2             # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: calinify           # set this to your Amazon ECR repository name
  EC2_HOST: ${{ secrets.CALINIFY_EC2_HOST }}
  EC2_USER: ${{ secrets.CALINIFY_EC2_USER }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        
    - name: Create .env file
      run: |
        echo "CALINIFY_DATABASE_HOST=${{ secrets.CALINIFY_DATABASE_HOST }}" >> .env
        echo "CALINIFY_DATABASE_PASSWORD=${{ secrets.CALINIFY_DATABASE_PASSWORD }}" >> .env
        echo "CALINIFY_DATABASE_PORT=${{ secrets.CALINIFY_DATABASE_PORT }}" >> .env
        echo "CALINIFY_DATABASE_TABLE_NAME=${{ secrets.CALINIFY_DATABASE_TABLE_NAME }}" >> .env
        echo "CALINIFY_DATABASE_USERNAME=${{ secrets.CALINIFY_DATABASE_USERNAME }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "AI_SERVER_URL=${{ secrets.AI_SERVER_URL }}" >> .env
        echo "TRANSPORT_SERVER_URL=${{ secrets.TRANSPORT_SERVER_URL }}" >> .env
        echo "SPRING_PROFILES_ACTIVE=dev" >> .env
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AWS_MONO_EC2_PEM }}
    
    - name: Deploy Docker image to EC2
      run: |       
        # SSH into EC2 and run Docker commands
        scp -o StrictHostKeyChecking=no .env ${{ secrets.CALINIFY_EC2_USER }}@${{ secrets.CALINIFY_EC2_HOST }}:/home/${{ env.EC2_USER }}/.env
        ssh -o StrictHostKeyChecking=no ${{ secrets.CALINIFY_EC2_USER }}@${{ secrets.CALINIFY_EC2_HOST }} << 'EOF'
          # Login to ECR
          aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          sudo docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${{ steps.login-ecr.outputs.registry }}

          # Pull the Docker image
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          if sudo docker ps -a --format '{{.Names}}' | grep -q '^core-backend-dev$'; then
            # Stop and remove the existing container
            sudo docker stop core-backend-dev
            sudo docker rm core-backend-dev
          fi

          # Run the new Docker container
          sudo docker run -d --name core-backend-dev --env-file /home/${{ secrets.CALINIFY_EC2_USER }}/.env -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        EOF
