name: Deploy to Amazon ECR

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-northeast-2             # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: calinify           # set this to your Amazon ECR repository name
  EC2_HOST: ${{ secrets.CALINIFY_EC2_HOST }}
  EC2_USER: ${{ secrets.CALINIFY_EC2_USERNAME }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        
    - name: Create .env file
      run: |
        echo "CALINIFY_DATABASE_HOST=${{ secrets.CALINIFY_DATABASE_HOST }}" >> .env
        echo "CALINIFY_DATABASE_PASSWORD=${{ secrets.CALINIFY_DATABASE_PASSWORD }}" >> .env
        echo "CALINIFY_DATABASE_PORT=${{ secrets.CALINIFY_DATABASE_PORT }}" >> .env
        echo "CALINIFY_DATABASE_TABLE_NAME=${{ secrets.CALINIFY_DATABASE_TABLE_NAME }}" >> .env
        echo "CALINIFY_DATABASE_USERNAME=${{ secrets.CALINIFY_DATABASE_USERNAME }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        
    - name: Deploy Docker image to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_KEY }}
      run: |
        # Save the PEM key to a file
        echo "$PRIVATE_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        # SSH into EC2 and run Docker commands
        scp -i ec2_key.pem -o StrictHostKeyChecking=no .env ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/.env
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          # Pull the Docker image
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          # Stop and remove any existing container
          docker stop core-backend-dev || true
          docker rm core-backend-dev || true

          # Run the new Docker container
          docker run -d --name core-backend-dev --env-file /home/{{ env.EC2_USER }}/.env -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        EOF
